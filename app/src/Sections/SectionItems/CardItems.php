<?php

namespace {

    use SilverStripe\AssetAdmin\Forms\UploadField;
    use SilverStripe\Assets\Image;
    use SilverStripe\CMS\Model\SiteTree;
    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\DropdownField;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\HTMLEditor\HTMLEditorField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\Forms\TreeDropdownField;
    use SilverStripe\ORM\DataObject;
    use TractorCow\Colorpicker\Color;
    use TractorCow\Colorpicker\Forms\ColorField;
    use UncleCheese\DisplayLogic\Forms\Wrapper;

    class CardItems extends DataObject
    {
        private static $default_sort = 'Sort';

        private static $db = [
            'Name'       => 'Varchar',
            'Content'    => 'HTMLText',
            'Icon'       => 'Varchar',
            'ContentOverlay' => 'Boolean',
            'CardType'   => 'Varchar',
            'CardWidth'  => 'Varchar',
            'CardBgColor'=> Color::class,
            'Animation'  => 'Varchar',
            'Archived'   => 'Boolean',
            'Sort'       => 'Int'
        ];

        private static $has_one = [
            'Parent'=> Card::class,
            'Page'  => SiteTree::class,
            'Image' => Image::class
        ];

        private static $owns = [
            'Image'
        ];

        private static $summary_fields = [
            'Name',
            'Content.Summary'    => 'Content summary',
            'Image.CMSThumbnail' => 'Image',
            'CardWidth'          => 'Width',
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->removeByName('ParentID');
            $fields->addFieldToTab('Root.Main', ReadonlyField::create('ParentRO', 'Parent', $this->Parent()->Title));

            $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            $fields->addFieldToTab('Root.Main', DropdownField::create('CardType', 'Card type',
                array(
                  'card-image'   => 'Card with image',
                  'card-bgcolor' => 'Card with background color'
                )
            ));
            $fields->addFieldToTab('Root.Main', UploadField::create('Image')
                ->setFolderName('Sections/Section_Card/Images')
                ->displayIf('CardType')->isEqualTo('card-image')->end());
            $fields->addFieldToTab('Root.Main', TreeDropdownField::create('PageID', 'Select page to link', SiteTree::class)
                ->displayIf('CardType')->isEqualTo('card-image')->end());
            $fields->addFieldToTab('Root.Main', CheckboxField::create('ContentOverlay', 'Enable content overlay')
                ->displayIf('CardType')->isEqualTo('card-image')->end());
            $fields->addFieldToTab('Root.Main', ColorField::create('CardBgColor', 'Card background color')
                ->displayIf('CardType')->isEqualTo('card-bgcolor')->end());

            $fields->addFieldToTab('Root.Main', $icon = TextField::create('Icon', 'Fa icon')
                ->displayIf('CardType')->isEqualTo('card-bgcolor')->end());
            $icon->setDescription('e.g. far fa-capsules (<a href="https://fontawesome.com/icons?d=gallery" target="_blank">click here for more icons</a>)');

            $fields->addFieldToTab('Root.Main', HTMLEditorField::create('Content'));
            $fields->addFieldToTab('Root.Main', DropdownField::create('CardWidth', 'Card width', SectionWidth::get()->filter('Archived', false)->map('Class', 'Name')
            ));
            $fields->addFieldToTab('Root.Main', DropdownField::create('Animation', 'Select card animation',
                Animation::get()->filter('Archived', false)->map('Name', 'Name')));
            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));
            $fields->addFieldToTab('Root.Main', HiddenField::create('Sort'));

            return $fields;
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }
    }
}
