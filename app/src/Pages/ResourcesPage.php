<?php

namespace {

    use SilverStripe\AssetAdmin\Forms\UploadField;
    use SilverStripe\Assets\Image;
    use SilverStripe\Forms\HTMLEditor\HTMLEditorField;
    use SilverStripe\ORM\ArrayList;
    use SilverStripe\TagField\StringTagField;
    use SilverStripe\View\ArrayData;

    class ResourcesPage extends Page
    {
        private static $icon_class = 'font-icon-p-posts';

        private static $db = [
            'Abstract'=> 'HTMLText',
            'Filters' => 'Text',
            'Authors' => 'Text',
        ];

        private static $has_one = [
            'Image' => Image::class
        ];

        private static $owns = [
            'Image'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->addFieldToTab('Root.Main', HTMLEditorField::create('Content'),'Sections');
            $fields->addFieldToTab('Root.Main', HTMLEditorField::create('Abstract'),'Sections');
            $fields->addFieldToTab('Root.Main', UploadField::create('Image', 'Featured image')
                ->setFolderName('ResourcesPage/FeaturedImages'), 'Content');
            $fields->addFieldToTab('Root.Main', StringTagField::create('Authors', 'Author/s',
                StaffPage::get(), explode(',', $this->Authors))->setCanCreate(true),'Content');
            $fields->addFieldToTab('Root.Main', StringTagField::create('Filters', 'Tags',
                $this->getVisibleFilterItems()->map('Title', 'Title'), explode(',', $this->Filters))->setCanCreate(true),'Content');

            return $fields;
        }

        public function getVisibleFilterItems()
        {
            $output = new ArrayList();
            $filters = $this->getParent()->Filters()->filter('Archived', false);
            foreach ($filters as $filter) {
                $items = $filter->FilterItems()->filter('Archived', false);
                foreach ($items as $item) {
                    $output->push(
                        new ArrayData(array('Title' => $item->Name))
                    );
                }
            }
            return $output;
        }

        public function getReadableAuthors()
        {
            $authorLists = $this->Authors;
            $authors = explode(',', $authorLists);

            $output = new ArrayList();
            foreach ($authors as $author) {
                $output->push(
                    new ArrayData(array('Name' => $author))
                );
            }
            return $output;
        }
    }
}
